apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

version = '3.5.1'
group = 'ua.net.nlp'

String artifactId = 'morfologik-ukrainian'

String ltVersion = '3.6-SNAPSHOT'

String langCode="uk"

String packageDir="org/languagetool/resource/" + langCode
String resourceDir=sourceSets.main.resources.srcDirs[0].toString() + "/" + packageDir
String outResDir=sourceSets.main.output.resourcesDir.toString() + "/" + packageDir
String outRulesDir=sourceSets.main.output.resourcesDir.toString() + "/org/languagetool/rules/uk"
String tmpDir="build/tmp"

String languagetoolResDestDir="$ltDir/languagetool-language-modules/uk/src/main/resources/org/languagetool/resource/uk"
String languagetoolRulesDestDir="$ltDir/languagetool-language-modules/uk/src/main/resources/org/languagetool/rules/uk"

String inputDir="${projectDir}/../../out"
String inputDictFile="dict_corp_lt.txt"

String dstEncoding="cp1251"
String srcEncoding="utf-8"



repositories {
    mavenLocal()
    mavenCentral()
}

configurations{
  provided {
        description = 'Configuration for generating the dictionaries'
  }
}

dependencies {
    provided 'org.languagetool:languagetool-tools:' + ltVersion
}


task createTagList(type: Exec, dependsOn: processResources) {
    def srcDict="${inputDir}/$inputDictFile"
    def outFile="${outResDir}/ukrainian_tags.txt"

    inputs.file srcDict
    outputs.file outFile

    workingDir "$projectDir"

    def cmd = "cat ${srcDict} | awk '{ print \$3 }' | grep -v 'verb.*:inf.*:coll' | sort -u > ${outFile}"

    commandLine "sh", "-c", "${cmd}"
}


task prepareDict(type: Exec, dependsOn: processResources) {
    def srcDict="${inputDir}/$inputDictFile"
    def outFile="${tmpDir}/all.tagged.tmp"

    inputs.file srcDict
    outputs.file outFile

    workingDir "$projectDir"

    doFirst {
        println "Preparing dict file $inputDictFile"
        new File("$workingDir/$tmpDir").mkdirs()
    }

    def cmd = "cat ${srcDict} | iconv -f ${srcEncoding} -t ${dstEncoding} | tr ' ' '\\t' | LC_ALL=POSIX sort -u > ${outFile}"

    commandLine "sh", "-c", "${cmd}"
}

task createPOSDict(type: JavaExec, dependsOn: prepareDict) {
    def outputDict="${outResDir}/ukrainian.dict"

    inputs.file tasks.prepareDict.outputs.files
    outputs.file outputDict

    workingDir "$projectDir"

    classpath = files(configurations.provided.files)
    main = 'org.languagetool.tools.POSDictionaryBuilder'

    args "-i", "${tmpDir}/all.tagged.tmp"
    args "-info", "${resourceDir}/ukrainian.info"
    args "-o", "${outputDict}"
}


task createSynthDict(type: JavaExec, dependsOn: prepareDict) {
    def outputDict="${outResDir}/ukrainian_synth.dict"

    inputs.file tasks.prepareDict.outputs.files
    outputs.file outputDict

    workingDir "$projectDir"

    classpath = files(configurations.provided.files)
    main = 'org.languagetool.tools.SynthDictionaryBuilder'

    args "-i", "${tmpDir}/all.tagged.tmp"
    args "-info", "${resourceDir}/ukrainian_synth.info"
    args "-o", "${outputDict}"
}


task prepareSpellWords(type: Exec, dependsOn: processResources) {
    def srcDict="${inputDir}/words_spell.txt"
    def outFile="${tmpDir}/all.words.tmp"

    inputs.file srcDict
    outputs.file outFile

    workingDir "$projectDir"

    doFirst {
        new File(tmpDir).mkdirs()
    }

    def cmd = "cat ${srcDict} | iconv -f ${srcEncoding} -t ${dstEncoding} | LC_ALL=POSIX sort -u > ${outFile}"

    commandLine "sh", "-c", "${cmd}"
}


task createSpellDict(type: JavaExec, dependsOn: prepareSpellWords) {
    def spellOutDir="${outResDir}/hunspell"
    def outFile="${spellOutDir}/uk_UA.dict"
    def freqFile="src/main/data/uk_wordlist.xml"

    inputs.file tasks.prepareSpellWords.outputs.files
    outputs.file outFile

    workingDir "$projectDir"

    classpath = files(configurations.provided.files)
    main = 'org.languagetool.tools.SpellDictionaryBuilder'

    args "-i", "${tmpDir}/all.words.tmp"
    args "-info", "${resourceDir}/hunspell/uk_UA.info"
    args "-o", "${outFile}"
    args "-freq", "${freqFile}"
}




task createOutRulesDir << {
    println "Preparing dict file $outRulesDir"
    new File("$outRulesDir").mkdirs()
}


task createReplacementDict(dependsOn: createOutRulesDir) {
    def srcDir="${inputDir}/../data/dict"
    def outFile="$outRulesDir/replace.txt"

    inputs.file "$srcDir/twisters.lst"
    outputs.file outFile


    def headText =
'''# Simple replace table
# Format: word=suggestion1|suggestion2|suggestion3...

'''
    doLast {

    def inText = new File("$srcDir/twisters.lst").text
    def lines = inText.split("\n")
    
    def outLines = lines.findAll {
        ! it.startsWith('#') && it.contains(' #>')
    }
    .collect {
        it = it.replace(' +cs=', '')
        it = it.replaceFirst(/^([а-яіїєґА-ЯІЇЄҐ'-]+).*#> *(.*)(#ok:.*)?/, '$1=$2')
    }

    new File(outFile).text = headText + outLines.join("\n") + '\n'
    println "Wrote $outLines.size replacements"

    }

}



task createSoftReplacementDict(dependsOn: createOutRulesDir) {
    def srcDir="${inputDir}/../data/dict"
    def outFile="${outRulesDir}/replace_soft.txt"
    def allFiles = Arrays.asList(new File(srcDir).listFiles())
    def srcFiles = allFiles.findAll{ it.name.endsWith('.lst') && ! it.name.startsWith('twisters') }

    inputs.file srcFiles
    outputs.file outFile


    def headText =
'''# Simple replace table for soft suggestions
# Format: word=suggestion1|suggestion2|suggestion3...

'''
    doLast {
		def outLines = []

		srcFiles.each{ srcFile ->
			def rvLines = new File("$srcDir/$srcFile.name").text
			    .split('\n')
			    .findAll {
				    it.contains(' #>')
			    }.collect{
				    it.replaceFirst(/^([а-яіїєґА-ЯІЇЄҐ'-]+).* #> *(.*)/, '$1=$2') //.replaceAll(/ *[;,] */, '|')
			    }

			outLines.addAll(rvLines)
		}

		java.text.Collator coll = java.text.Collator.getInstance(new Locale("uk", "UA"))
        Collections.sort(outLines, coll)
		
        println "Wrote $outLines.size replacements"
		new File(outFile).text = headText + outLines.join('\n') + "\n"
	}

}


task createCaseGovernmentDict() {
    def srcDir="${inputDir}/../data/dict"
    def outFile="${outResDir}/case_government.txt"
    def srcFiles=["base.lst", "twisters.lst", "slang.lst"]

    inputs.file srcFiles.collect{ "$srcDir/$it" }
    outputs.file outFile

    doFirst {
        new File(outResDir).mkdirs()
    }

	doLast {
		def outLines = []

		srcFiles.each{ srcFile ->

			def rvLines = new File("$srcDir/$srcFile").text.split('\n').findAll{
				(it.contains(' /adj') || it.contains("+cs=")) && it.contains(' rv_')
			}.collect{
				def out = it.contains(" +cs=") ? it.replaceFirst(/^ \+cs=(.*?) .* (rv_...(:rv_...)*).*?$/, '$1 $2\nнай$1 $2') \
				                               : it.replaceFirst(/^(.*?) .* (rv_...(:rv_...)*).*?$/, '$1 $2')
				out.replace("rv_", "v_")
			}

			outLines.addAll(rvLines)
		}
		
        println "Wrote $outLines.size lines"
		new File(outFile).text = outLines.join('\n') + '\n'
	}
}


task helperDicts (dependsOn: [createCaseGovernmentDict, createReplacementDict, createSoftReplacementDict])


task deployDictToLT(type: Copy, dependsOn: classes) {
    from outResDir
    into "${languagetoolResDestDir}"

    includeEmptyDirs = false

//    with dataContent
}


task deployHelperDictsToLT(type: Copy, dependsOn: [createSoftReplacementDict, createReplacementDict, createCaseGovernmentDict]) {
    outputs.upToDateWhen {false}

    copy {
        logger.lifecycle "Deploying to LT dir: ${languagetoolRulesDestDir}"

        from outRulesDir
        into "${languagetoolRulesDestDir}"
        include "**/replace*.txt"

        includeEmptyDirs = false
    }

    copy {
        logger.lifecycle "Deploying to LT dir: ${languagetoolResDestDir}"

        from outResDir
        into "${languagetoolResDestDir}"
        include "**/case_*.txt"

        includeEmptyDirs = false
    }

}

task deployToLT(dependsOn: [publish, deployHelperDictsToLT])


jar {
    manifest {
        attributes 'Implementation-Title': 'Ukrainian part-of-speech (POS) dictionary as a Morfologik binary',
                   'Implementation-Version': version
    }

//    setArchiveName "${artifactId}-${version}.jar"

    include '**/*.dict'
    include '**/*.info'
    include '**/README*'
    include '**/*tags*.txt'

    includeEmptyDirs false
}

classes.dependsOn(createPOSDict, createSynthDict, createTagList, createSpellDict, createCaseGovernmentDict)
compileJava.enabled = false


publishing {
    repositories {
        mavenLocal()
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
