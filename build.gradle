apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'

version = '1.0'
group = 'org.dict_uk'

String langCode="uk"

String affixDir="data/affix"

String outputDir="out"
String prevDir="../../out/prev"

String testOutputDir="$outputDir/test"
String testPrevDir="$testOutputDir/prev"

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.5'
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.5'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.5'
    compile 'commons-cli:commons-cli:1.3'
    testCompile 'junit:junit:4.12'
}

eclipse {
  classpath {
    defaultOutputDir = file('build')
  }
}


//
// Auxilliary targets
//

task reverseVerbs (type: JavaExec, dependsOn: classes) {
    def inputFile = "$affixDir/v.aff"
    inputs.file inputFile
    outputs.file "$affixDir/vr.aff"

    classpath = sourceSets.main.runtimeClasspath
    main = "org.dict_uk.expand.VerbReverse"
    args file(inputFile), file(outputs.files[0])

//    standardInput = file(inputFile).newInputStream()
//    standardOutput = file(outputs.files[0]).newOutputStream()
}

task reverseAdvp (type: JavaExec, dependsOn: classes) {
    def inputFile = "$affixDir/v_advp.aff"
    inputs.file inputFile
    outputs.file "$affixDir/vr_advp.aff"

    classpath = sourceSets.main.runtimeClasspath
    main = "org.dict_uk.expand.VerbReverse"

    args file(inputFile), file(outputs.files[0])
}

task reverseAffix (dependsOn: [reverseVerbs, reverseAdvp]) {
}


task sortDict(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = "org.dict_uk.tools.Sort"

	workingDir = file("data/dict")
	
	def files = "alt.lst base-abbr.lst base.lst base-compound.lst colors.lst dot-abbr.lst geography.lst "
	files += "slang.lst twisters.lst composite.lst ignored.lst names.lst rare.lst tags.lst"

	args files.split()
}

//
// Testing targets
//

task testExpand(type: JavaExec, dependsOn: [reverseAffix, classes]) {
    classpath = sourceSets.main.runtimeClasspath
    main = "org.dict_uk.expand.ExpandAll"

    workingDir = file("out/test")

    def opts = "--corp --indent --mfl --stats --wordlist"
    args "-aff", "../../data/affix"
    args "-dict", "."
    args opts.split()

    doLast {
        def file="dict_corp_lt.txt"
        def noTestOutputChange = (new File("$testOutputDir/$file").text == new File("$testPrevDir/$file").text)
        assert noTestOutputChange

        file="dict_corp_vis.txt"
        def noTestVisOutputChange = (new File("$testOutputDir/$file").text == new File("$testPrevDir/$file").text)
        assert noTestVisOutputChange

        file="dict_corp_vis.txt"
        def noTestTagsOutputChange = (new File("$testOutputDir/tags.txt").text == new File("$testPrevDir/tags.txt").text)
        assert noTestTagsOutputChange
    }
}


//
// Main targets
//

task expandForCorp(type: JavaExec, dependsOn: [reverseAffix, testExpand]) {
    classpath = sourceSets.main.runtimeClasspath
    main = "org.dict_uk.expand.ExpandAll"

    workingDir = file(outputDir)

//    def opts = "--corp --indent --mfl --uncontr --stats --wordlist --time"
    def opts = "--corp --indent --mfl --stats --wordlist --time"
    args "-aff", "../data/affix"
    args "-dict", "../data/dict"
    args opts.split()

    jvmArgs "-Xmx5g"
//    jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=n"
}

def get_diff_cmd(outputDir, file) {
    return "diff -u $outputDir/prev/$file $outputDir/$file > $outputDir/${file}.diff || echo 'File $file differs!'"
}


task diff(type: Exec) {
    def dictFile="dict_corp_lt.txt"

    def cmd = get_diff_cmd(outputDir, dictFile)
    cmd += "; " + get_diff_cmd(outputDir, 'words.txt')
    cmd += "; " + get_diff_cmd(outputDir, 'lemmas.txt')
    cmd += "; " + get_diff_cmd(outputDir, 'tags.txt')
    
    dictFile="dict_corp_vis.txt"
    cmd += "; " + get_diff_cmd(outputDir, dictFile)

    commandLine "sh", "-c", "${cmd}"
}

task expand(dependsOn: expandForCorp) {
}


task expandInteractive(type: JavaExec, dependsOn: reverseAffix) {
    classpath = sourceSets.main.runtimeClasspath
    main = "org.dict_uk.expand.Expand"

    workingDir = file(outputDir)
    standardInput = System.in

    def opts = "--corp --indent -f"
    args "-aff", "../data/affix"
    args "-dict", "-"
    args opts.split()
}


//
// deploy LT dict
//

task deployToLT(type: GradleBuild) {
    dir = 'distr/language-dict-uk'
    tasks = ['copyDictFiles']
}

