apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'

compileJava.options.encoding = 'UTF-8'

version = '3.5'
group = 'org.dict_uk'

String langCode="uk"

String affixDir="data/affix"

String outputDir="out"
String prevDir="../../out/prev"


repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.7'

    compile 'commons-lang:commons-lang:2.4'
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.5'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.5'
    compile 'commons-cli:commons-cli:1.3'
    testCompile 'junit:junit:4.12'
}

//compileGroovy {
//    exclude '**/tools/other/*.groovy'
//}

eclipse {
  classpath {
    defaultOutputDir = file('build')
  }
}


//
// Auxilliary targets
//

task reverseVerbs (type: JavaExec, dependsOn: classes) {
    def inputFile = "$affixDir/v.aff"
    inputs.file inputFile
    outputs.file "$affixDir/vr.aff"

    classpath = sourceSets.main.runtimeClasspath
    main = "org.dict_uk.expand.VerbReverse"
    args file(inputFile), file(outputs.files[0])

//    standardInput = file(inputFile).newInputStream()
//    standardOutput = file(outputs.files[0]).newOutputStream()
}

task reverseAdvp (type: JavaExec, dependsOn: classes) {
    def inputFile = "$affixDir/v_advp.aff"
    inputs.file inputFile
    outputs.file "$affixDir/vr_advp.aff"

    classpath = sourceSets.main.runtimeClasspath
    main = "org.dict_uk.expand.VerbReverse"

    args file(inputFile), file(outputs.files[0])
}

task reverseAffix (dependsOn: [reverseVerbs, reverseAdvp]) {
}


task sortDict(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = "org.dict_uk.tools.Sort"

	workingDir = file("data/dict")
	
	def files = "alt.lst base-abbr.lst base.lst base-compound.lst colors.lst dot-abbr.lst geography.lst "
	files += "slang.lst twisters.lst composite.lst ignored.lst names.lst rare.lst"

	args files.split()
}


task dups {
  doLast {
	def dictDir = file("data/dict")
	
	def files = dictDir.listFiles().findAll { it.name.endsWith('.lst') }
	
	def lines = files.collect {  it.text.split("\n")  }.flatten() \
	    .collect { it.trim().replaceAll(/\s*#.*/, '').replaceAll(/\.[^< ]+/, '...') } \
	    .grep { it && ! it.startsWith("+cs") }

    lines = lines.grep { ! it.startsWith('#') }

    def dups = lines.countBy{it}.grep{it.value > 1 }.collect{it.key}

    println "Found ${dups.size} dups"
    println dups.toSorted().join("\n")
  }
}

task checkReplacements {
  doLast {
	def dictDir = file("data/dict")
	
	def files = dictDir.listFiles().findAll { it.name.endsWith('.lst') }
	
	def replWords = files.collect { it.text.split("\n")  } \
	    .flatten() \
	    .findAll { it.contains(" #> ") }
	    .collect { it.split(" #> ")[1].trim().split(/[;, \|]+/) }
	    .flatten()
	    .collect { it.replaceAll(/[()]/, '') }
	    .unique().sort()

    def spellWords = new File("out/words_spell.txt").text.split("\n")
    
    println "Unique replacement words: ${replWords.size}"
    
    replWords.removeAll(spellWords)


    println "Unknown (${replWords.size}):\n" + replWords.join("\n")
  }
}


task showExpandCommand {
  doLast {
    def opts = " --corp --indent --mfl --stats --wordlist --time"
    opts += " -aff data/affix"
    opts += " -dict data/dict"

    def cmd = "groovy -cp "
    cmd += sourceSets.main.output.classesDir
    cmd += ":" + sourceSets.main.output.resourcesDir
    cmd += ":" + configurations.runtime.asFileTree.files.join(':')
//    cmd += " org.dict_uk.expand.ExpandAll"
    cmd += " src/main/groovy/org/dict_uk/expand/ExpandAll.groovy"
    cmd += opts
    
    println cmd
  }
}

//
// Testing targets
//

def getAdjustedText(filename) {
       new File(filename).text.replace("\r\n", "\n")
}


task testExpand(type: JavaExec, dependsOn: [reverseAffix, classes]) {
    classpath = sourceSets.main.runtimeClasspath
    main = "org.dict_uk.expand.ExpandAll"

    workingDir = file('test')

    def opts = "--corp --indent --mfl --stats --wordlist"
    args "-aff", "../data/affix"
    args "-dict", "dict"
    args opts.split()

    doLast {
        def file="dict_corp_lt.txt"
        def noTestOutputChange = getAdjustedText("$workingDir/$file") == getAdjustedText("$workingDir/prev/$file")
        assert noTestOutputChange

        file="dict_corp_vis.txt"
        def noTestVisOutputChange = getAdjustedText("$workingDir/$file") == getAdjustedText("$workingDir/prev/$file")
        assert noTestVisOutputChange

        def noTestTagsOutputChange = getAdjustedText("$workingDir/tags.txt") == getAdjustedText("$workingDir/prev/tags.txt")
        assert noTestTagsOutputChange
    }
}


//
// Main targets
//

task expandForCorp(type: JavaExec, dependsOn: [reverseAffix, testExpand]) {
    classpath = sourceSets.main.runtimeClasspath
    main = "org.dict_uk.expand.ExpandAll"

    workingDir = file(outputDir)

    def opts = "--corp --indent --mfl --stats --wordlist --time"
    // opts += "--removeWithRegex verb.*:inf.*:coll"            // remove colloquial verb forms

    args "-aff", "../data/affix"
    args "-dict", "../data/dict"
    args opts.split()

    jvmArgs "-Xmx5g"
//    jvmArgs "-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -XX:FlightRecorderOptions=defaultrecording=true,dumponexit=true,dumponexitpath=dumponexit.jfr".split()
//    jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=n"
}

def get_diff_cmd(outputDir, file) {
    return "diff -u $outputDir/prev/$file $outputDir/$file > $outputDir/${file}.diff || echo 'File $file differs!'"
}


task diff(type: Exec) {
    def dictFile="dict_corp_lt.txt"

    def cmd = get_diff_cmd(outputDir, dictFile)
    cmd += "; " + get_diff_cmd(outputDir, 'words.txt')
    cmd += "; " + get_diff_cmd(outputDir, 'words_spell.txt')
    cmd += "; " + get_diff_cmd(outputDir, 'lemmas.txt')
    cmd += "; " + get_diff_cmd(outputDir, 'tags.txt')
    
    dictFile="dict_corp_vis.txt"
    cmd += "; " + get_diff_cmd(outputDir, dictFile)

    commandLine "sh", "-c", "${cmd}"
}

task expand(dependsOn: expandForCorp) {
}


task expandInteractive(type: JavaExec, dependsOn: reverseAffix) {
    classpath = sourceSets.main.runtimeClasspath
    main = "org.dict_uk.expand.Expand"

    workingDir = file(outputDir)
    standardInput = System.in

    def opts = "--corp -f"
    if( ! project.hasProperty('flat') ) {
        opts += " --indent"
    }
    args "-aff", "../data/affix"
    args "-dict", "-"
    args opts.split()
}


//
// deploy LT dict
//

task deployToLT(type: GradleBuild) {
    dir = 'distr/language-dict-uk'
    tasks = ['deployToLT']
}


// windows have non-unicode encoding set by default
String osName = System.getProperty("os.name").toLowerCase();
if ( osName.contains("windows")) {
    if( ! "UTF-8".equals(System.getProperty("file.encoding")) ) {
        println "On Windows to get unicode handled correctly you need to set environment variable before running expand:"
        println "\tbash:"
        println "\t\texport JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8"
        println "\tcmd:"
        println "\t\t(change Font to 'Lucida Console' in cmd window properties)"
        println "\t\tchcp 65001"
        println "\t\tset JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8"
        println "\n\tNOTE: bash shell (e.g. git bash) is recommended: only in bash the output will handle all cyrillics and expandInteractive only supported in bash"

        // poor man's safety net (may work but still will not show all cyrillic characters)
        tasks.each { task ->
            if( task instanceof JavaExec ) {
                task.jvmArgs '-Dfile.encoding=UTF-8'
            }
        }
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'dict_uk classes',
            'Implementation-Version': version
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
